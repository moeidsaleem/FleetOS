import { NextRequest, NextResponse } from 'next/server'
import { prisma } from '../../../libs/database'
import { DriverSchema } from '../../../types'
import { z } from 'zod'
import { DriverStatus, Prisma } from '@prisma/client'
import { uberSyncService } from '../../../libs/uber-sync'

// GET /api/drivers - List all drivers
export async function GET(request: NextRequest) {
  try {
    const { searchParams } = new URL(request.url)
    const page = parseInt(searchParams.get('page') || '1')
    const limit = parseInt(searchParams.get('limit') || '10')
    const status = searchParams.get('status')
    const search = searchParams.get('search')
    const syncFromUber = searchParams.get('syncFromUber') === 'true'

    let syncResult = null
    // Sync from Uber if requested (now uses OAuth Uber API client)
    if (syncFromUber) {
      console.log('Syncing drivers from Uber Fleet API (OAuth)...')
      try {
        syncResult = await uberSyncService.syncDriversFromUber()
      } catch (error) {
        console.error('Uber sync failed:', error)
        syncResult = { success: false, error: error instanceof Error ? error.message : 'Unknown error' }
        // Continue with existing data even if sync fails
      }
    }

    const skip = (page - 1) * limit

    // Build where clause
    const where: Prisma.DriverWhereInput = {}
    
    if (status) {
      where.status = status as unknown as DriverStatus
    }
    
    if (search) {
      where.OR = [
        { name: { contains: search, mode: 'insensitive' } },
        { email: { contains: search, mode: 'insensitive' } },
        { phone: { contains: search } }
      ]
    }

    // Get drivers with their latest metrics
    const [drivers, total] = await Promise.all([
      prisma.driver.findMany({
        where,
        skip,
        take: limit,
        include: {
          metrics: {
            orderBy: { date: 'desc' },
            take: 1
          },
          alerts: {
            where: {
              createdAt: {
                gte: new Date(Date.now() - 24 * 60 * 60 * 1000) // Last 24 hours
              }
            },
            take: 5
          }
        },
        orderBy: { name: 'asc' }
      }),
      prisma.driver.count({ where })
    ])

    // Calculate additional fields
    const driversWithScores = drivers.map((driver) => ({
      ...driver,
      currentScore: driver.metrics[0]?.calculatedScore || 0,
      recentAlertsCount: driver.alerts.length,
      lastMetricDate: driver.metrics[0]?.date || null,
      phoneNumber: driver.phone, // Map to expected field name
    }))

    return NextResponse.json({
      success: true,
      // Return drivers directly under 'data' for compatibility
      data: driversWithScores,
      pagination: {
        page,
        limit,
        total,
        totalPages: Math.ceil(total / limit)
      },
      syncResult,
      timestamp: new Date()
    })

  } catch (error) {
    console.error('Error fetching drivers:', error)
    return NextResponse.json({
      success: false,
      error: 'Failed to fetch drivers',
      timestamp: new Date()
    }, { status: 500 })
  }
}

// POST /api/drivers - Create a new driver
/**
 * POST /api/drivers
 * Creates a new driver record in the database
 * 
 * @param request - The incoming HTTP request containing driver data
 * @returns JSON response with created driver data or error message
 */
export async function POST(request: NextRequest) {
  console.log('POST /api/drivers - Creating new driver')
  try {
    // Parse the request body into JSON
    const body = await request.json()
    console.log('Received request body:', body)
    
    // Create a validation schema by omitting auto-generated fields
    // from the base DriverSchema
    const CreateDriverSchema = DriverSchema.omit({ 
      id: true, // UUID will be generated by database
      joinedAt: true, // Will be set to current timestamp
      updatedAt: true // Will be set to current timestamp
    })
    console.log('Created validation schema')
    
    // Validate the request data against our schema
    const validatedData = CreateDriverSchema.parse(body)
    console.log('Data validation successful:', validatedData)

    // Check for existing drivers with same email or Uber ID
    // to prevent duplicate entries
    console.log('Checking for existing drivers with email:', validatedData.email, 'or Uber ID:', validatedData.uberDriverId)
    const existingDriver = await prisma.driver.findFirst({
      where: {
        OR: [
          { email: validatedData.email },
          { uberDriverId: validatedData.uberDriverId }
        ]
      }
    })

    // Return error if driver already exists
    if (existingDriver) {
      console.log('Driver already exists:', existingDriver)
      return NextResponse.json({
        success: false,
        error: 'Driver with this email or Uber ID already exists',
        timestamp: new Date()
      }, { status: 400 })
    }

    // Create new driver record in database
    // Type assertion needed due to Prisma's type system
    console.log('Creating new driver record with data:', validatedData)
    const driver = await prisma.driver.create({
      data: validatedData as unknown as Prisma.DriverCreateInput
    })
    console.log('Driver created successfully:', driver)

    // Return success response with created driver data
    return NextResponse.json({
      success: true,
      data: driver,
      timestamp: new Date()
    }, { status: 201 })

  } catch (error) {
    // Log the error for debugging
    console.error('Error creating driver:', error)
    
    // Handle validation errors specifically
    if (error instanceof z.ZodError) {
      console.log('Validation error details:', error.errors)
      return NextResponse.json({
        success: false,
        error: 'Validation error',
        details: error.errors,
        timestamp: new Date()
      }, { status: 400 })
    }

    // Handle all other errors
    console.error('Unexpected error occurred:', error)
    return NextResponse.json({
      success: false,
      error: 'Failed to create driver',
      timestamp: new Date()
    }, { status: 500 })
  }
} 